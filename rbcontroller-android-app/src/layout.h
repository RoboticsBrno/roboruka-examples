// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by http://localhost:3000/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":28231,"type":"Arm","state":{"id":"Arm1","x":0,"y":0,"w":12,"h":9,"css":{},"info":{"radius":130,"height":51,"off_y":20,"bones":[{"len":110,"angle":-1.5708,"rmin":-1.65806,"rmax":0,"amin":-3.14159,"amax":3.14159,"bmin":-3.14159,"bmax":3.14159},{"len":130,"angle":0.08726640000000008,"rmin":0.523599,"rmax":2.96706,"amin":-0.349066,"amax":3.14159,"bmin":0.698132,"bmax":2.79253}]}}},{"uuid":25820,"type":"Joystick","state":{"id":"Joystick1","x":4.5,"y":10.5,"w":6,"h":6,"css":{},"color":"blue","keys":"wasd ","text":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Arm1(
            UI.arm(0, 0, 12, 9, 28231)
                .info(rkArmGetInfo())
        ),
        Joystick1(
            UI.joystick(4.5, 10.5, 6, 6, 25820)
                .color("blue")
                .keys("wasd ")
        )
    {
    }

public:
    void commit();

    Arm& Arm1;
    Joystick& Joystick1;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}
   
    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Arm Arm1;
    Joystick Joystick1;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Arm1 = Arm1.finish();
    Layout.Joystick1 = Joystick1.finish();
    UI.commit();
}

};

};
